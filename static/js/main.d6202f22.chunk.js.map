{"version":3,"sources":["redux/reducers/me.js","redux/reducers/index.js","redux/constants/me.js","redux/store.js","redux/actions/me.js","components/Login/Login.js","components/Login/index.js","components/Profile/index.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","data","loading","fetched","error","loggedIn","message","resetState","authPersistConfig","key","storage","appReducer","combineReducers","me","persistReducer","state","action","type","localStorage","setItem","payload","access_token","user","removeItem","enhancer","composeWithDevTools","applyMiddleware","thunk","promise","store","createStore","rootReducer","persistor","persistStore","getMe","dispatch","axios","get","headers","Authorization","getItem","catch","err","response","status","purge","logout","Promise","resolve","useStyles","makeStyles","theme","button","margin","spacing","loginButton","backgroundColor","color","textField","marginLeft","marginRight","marginTop","width","inputContainer","display","flexDirection","marginBottom","paper","padding","Login","props","email","handleChange","handleLogin","password","classes","className","onSubmit","Paper","TextField","name","onChange","label","variant","value","Button","onClick","mapDispatchToProps","loginUser","post","then","res","index","e","preventDefault","setState","target","this","Component","connect","fullname","accessToken","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6202f22.chunk.js","sourcesContent":["import * as types from \"../constants/me\";\nimport { persistor } from \"../store\";\nimport { REHYDRATE } from \"redux-persist\";\n\nconst initialState = {\n  data: {},\n  loading: false,\n  fetched: false,\n  error: false,\n  loggedIn: false,\n  message: \"\"\n};\n\nconst resetState = {\n  data: {},\n  loading: false,\n  fetched: false,\n  error: false,\n  loggedIn: false,\n  message: \"\"\n};\nexport const me = (state = initialState, action) => {\n  switch (action.type) {\n    case `${types.GET_ME}_PENDING`:\n      return { ...state, loading: true };\n\n    case `${types.LOGIN}_FULFILLED`:\n      localStorage.setItem(\"accessToken\", action.payload.data.access_token);\n      return { ...state };\n\n    case `${types.GET_ME}_FULFILLED`:\n      return {\n        ...state,\n        loading: false,\n        data: action.payload.data.user,\n        fetched: true,\n        loggedIn: true\n      };\n\n    case `${types.GET_ME}_REJECTED`:\n      return { ...state, loading: false, error: true, message: action.payload };\n\n    case `${types.LOGOUT}_FULFILLED`:\n      localStorage.removeItem(\"accessToken\");\n      return { state: resetState, loggedIn: false };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\n\nimport { me } from \"./me\";\n\nconst authPersistConfig = {\n  key: \"me\",\n  storage: storage\n};\n\nconst appReducer = combineReducers({\n  me: persistReducer(authPersistConfig, me)\n});\n\nexport default appReducer;\n","export const LOGIN = \"LOGIN\";\nexport const GET_ME = \"GET_ME\";\nexport const LOGOUT = \"LOGOUT\";\n","import { applyMiddleware, createStore, combineReducers } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport promise from \"redux-promise-middleware\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"./reducers\";\n\nconst enhancer = composeWithDevTools(applyMiddleware(thunk, promise));\n\n// const persistConfig = {\n//   key: \"root\",\n//   storage\n// };\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(rootReducer, enhancer);\nexport const persistor = persistStore(store);\n","import * as types from \"../constants/me\";\nimport axios from \"axios\";\nimport { persistor } from \"../store\";\n\nexport const loginUser = (email, password) => dispatch =>\n  dispatch({\n    type: types.LOGIN,\n    payload: axios.post(`https://dev.propel.live/api/v1/auth/login`, {\n      email,\n      password\n    })\n  }).then(res => dispatch(getMe(res.value.data.access_token)));\n\nexport const getMe = () => dispatch =>\n  dispatch({\n    type: types.GET_ME,\n    payload: axios.get(\"https://dev.propel.live/api/v1/users/me\", {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n      }\n    })\n  }).catch(err => {\n    if (err.response && err.response.status === 401) {\n      persistor.purge();\n      return dispatch(logout());\n    }\n  });\n\nexport const logout = () => ({\n  type: types.LOGOUT,\n  payload: Promise.resolve(false)\n});\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport \"./Login.css\";\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  },\n  loginButton: {\n    margin: theme.spacing(1),\n    backgroundColor: \"#2e2e2e\",\n    color: \"#fff\",\n    \"&:hover\": {\n      backgroundColor: \"#2e2e2e\",\n      color: \"#fff\"\n    }\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    marginTop: theme.spacing(1),\n    width: 300\n  },\n  inputContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginBottom: theme.spacing(1)\n  },\n  paper: {\n    padding: theme.spacing(2)\n  }\n}));\n\nexport default function Login(props) {\n  const { email, handleChange, handleLogin, password } = props;\n\n  const classes = useStyles();\n  return (\n    <div className=\"Login\">\n      <form onSubmit={handleLogin}>\n        <Paper className={classes.paper}>\n          <div className={classes.inputContainer}>\n            <TextField\n              name=\"email\"\n              className={classes.textField}\n              onChange={handleChange}\n              label=\"Email\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              value={email}\n            />\n            <TextField\n              name=\"password\"\n              className={classes.textField}\n              onChange={handleChange}\n              type=\"password\"\n              label=\"Password\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              value={password}\n            />\n          </div>\n          <Button\n            variant=\"contained\"\n            className={classes.loginButton}\n            onClick={handleLogin}\n            type=\"submit\"\n          >\n            Login\n          </Button>\n        </Paper>\n      </form>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { loginUser } from \"../../redux/actions/me\";\nimport Login from \"./Login\";\n\nconst mapStateToProps = state => ({\n  me: state.me\n});\n\nconst mapDispatchToProps = { loginUser };\n\nclass index extends Component {\n  state = {\n    email: \"\",\n    password: \"\"\n  };\n\n  handleLogin = e => {\n    e.preventDefault();\n    const { email, password } = this.state;\n    this.props.loginUser(email, password);\n  };\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  render() {\n    return (\n      <Login\n        handleLogin={this.handleLogin}\n        handleChange={this.handleChange}\n        email={this.state.email}\n        password={this.state.password}\n      />\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(index);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { logout } from \"../../redux/actions/me\";\n\nconst mapStateToProps = state => ({\n  me: state.me\n});\n\nconst mapDispatchToProps = { logout };\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(1),\n    marginTop: theme.spacing(2)\n  }\n}));\n\nfunction Profile(props) {\n  const classes = useStyles();\n\n  const logout = () => props.logout();\n\n  const user = props.me.data;\n  return (\n    <Paper className={classes.paper}>\n      {user.fullname}\n\n      <div>\n        <Button variant=\"contained\" className={classes.button} onClick={logout}>\n          Logout\n        </Button>\n      </div>\n    </Paper>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Login from \"./Login\";\nimport Profile from \"./Profile\";\n\nimport { getMe } from \"../redux/actions/me\";\n\nconst mapStateToProps = state => ({\n  me: state.me,\n  accessToken: localStorage.getItem(\"accessToken\")\n});\n\nconst mapDispatchToProps = { getMe };\n\nexport class index extends Component {\n  state = {\n    loading: this.props.accessToken && !this.props.me.fetched\n  };\n  componentDidMount() {\n    if (this.state.loading) {\n      this.props.getMe().then(() => this.setState({ loading: false }));\n    }\n  }\n  render() {\n    if (this.state.loading) return null;\n    return !this.props.me.loggedIn ? <Login /> : <Profile me={this.props.me} />;\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(index);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport { store, persistor } from \"./redux/store\";\nimport Index from \"./components/index\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Index />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}